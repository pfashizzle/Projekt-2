
ATmega328P device drivers - display demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000b6c  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800102  00800102  00000c02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d6d  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddc  00000000  00000000  00002ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f36  00000000  00000000  0000397d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  000048b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d4  00000000  00000000  00004cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9a  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006436  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 03 	call	0x732	; 0x732 <main>
  9e:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:

   self->pin = 0;
   self->pullup = 0;
   self->input = 0;
   self->pcmsk = 0;
   self->pcint = 0;
  a6:	fc 01       	movw	r30, r24
  a8:	68 30       	cpi	r22, 0x08	; 8
  aa:	80 f4       	brcc	.+32     	; 0xcc <button_init+0x26>
  ac:	60 83       	st	Z, r22
  ae:	8b e2       	ldi	r24, 0x2B	; 43
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	92 83       	std	Z+2, r25	; 0x02
  b4:	81 83       	std	Z+1, r24	; 0x01
  b6:	89 e2       	ldi	r24, 0x29	; 41
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	94 83       	std	Z+4, r25	; 0x04
  bc:	83 83       	std	Z+3, r24	; 0x03
  be:	8d e6       	ldi	r24, 0x6D	; 109
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	96 83       	std	Z+6, r25	; 0x06
  c4:	85 83       	std	Z+5, r24	; 0x05
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	87 83       	std	Z+7, r24	; 0x07
  ca:	25 c0       	rjmp	.+74     	; 0x116 <button_init+0x70>
  cc:	88 ef       	ldi	r24, 0xF8	; 248
  ce:	86 0f       	add	r24, r22
  d0:	86 30       	cpi	r24, 0x06	; 6
  d2:	78 f4       	brcc	.+30     	; 0xf2 <button_init+0x4c>
  d4:	80 83       	st	Z, r24
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	92 83       	std	Z+2, r25	; 0x02
  dc:	81 83       	std	Z+1, r24	; 0x01
  de:	83 e2       	ldi	r24, 0x23	; 35
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	94 83       	std	Z+4, r25	; 0x04
  e4:	83 83       	std	Z+3, r24	; 0x03
  e6:	8b e6       	ldi	r24, 0x6B	; 107
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	96 83       	std	Z+6, r25	; 0x06
  ec:	85 83       	std	Z+5, r24	; 0x05
  ee:	17 82       	std	Z+7, r1	; 0x07
  f0:	12 c0       	rjmp	.+36     	; 0x116 <button_init+0x70>
  f2:	6e 50       	subi	r22, 0x0E	; 14
  f4:	66 30       	cpi	r22, 0x06	; 6
  f6:	78 f4       	brcc	.+30     	; 0x116 <button_init+0x70>
  f8:	60 83       	st	Z, r22
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	92 83       	std	Z+2, r25	; 0x02
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	86 e2       	ldi	r24, 0x26	; 38
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	94 83       	std	Z+4, r25	; 0x04
 108:	83 83       	std	Z+3, r24	; 0x03
 10a:	8c e6       	ldi	r24, 0x6C	; 108
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	96 83       	std	Z+6, r25	; 0x06
 110:	85 83       	std	Z+5, r24	; 0x05
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	87 83       	std	Z+7, r24	; 0x07
 116:	a1 81       	ldd	r26, Z+1	; 0x01
 118:	b2 81       	ldd	r27, Z+2	; 0x02
 11a:	2c 91       	ld	r18, X
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	00 80       	ld	r0, Z
 122:	02 c0       	rjmp	.+4      	; 0x128 <button_init+0x82>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <button_init+0x7e>
 12c:	82 2b       	or	r24, r18
 12e:	8c 93       	st	X, r24
 130:	08 95       	ret

00000132 <button_enable_interrupt>:
*
*                          - self: Pekare till tryckknappen som PCI-avbrott
*                                  ska aktiveras på.
********************************************************************************/
void button_enable_interrupt(struct button* self)
{
 132:	fc 01       	movw	r30, r24
   asm("SEI");
 134:	78 94       	sei
   PCICR |= (1 << self->pcint);
 136:	87 81       	ldd	r24, Z+7	; 0x07
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	a9 01       	movw	r20, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <button_enable_interrupt+0x12>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <button_enable_interrupt+0xe>
 148:	ca 01       	movw	r24, r20
 14a:	a8 e6       	ldi	r26, 0x68	; 104
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	9c 91       	ld	r25, X
 150:	89 2b       	or	r24, r25
 152:	8c 93       	st	X, r24
   *(self->pcmsk) |= (1 << self->pin);
 154:	a5 81       	ldd	r26, Z+5	; 0x05
 156:	b6 81       	ldd	r27, Z+6	; 0x06
 158:	8c 91       	ld	r24, X
 15a:	00 80       	ld	r0, Z
 15c:	02 c0       	rjmp	.+4      	; 0x162 <button_enable_interrupt+0x30>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <button_enable_interrupt+0x2c>
 166:	28 2b       	or	r18, r24
 168:	2c 93       	st	X, r18
 16a:	08 95       	ret

0000016c <display_output_enabled>:
   count_direction = direction;
   eeprom_write_byte(EEPROM_COUNT_DIRECTION, (uint8_t)(count_direction));
   timer_set_new_time(&timer_count_speed, count_speed_ms);
   
   return;
}
 16c:	ee e0       	ldi	r30, 0x0E	; 14
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	a0 85       	ldd	r26, Z+8	; 0x08
 172:	b1 85       	ldd	r27, Z+9	; 0x09
 174:	4c 91       	ld	r20, X
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	c9 01       	movw	r24, r18
 17c:	02 84       	ldd	r0, Z+10	; 0x0a
 17e:	02 c0       	rjmp	.+4      	; 0x184 <display_output_enabled+0x18>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <display_output_enabled+0x14>
 188:	24 2f       	mov	r18, r20
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	28 23       	and	r18, r24
 18e:	39 23       	and	r19, r25
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	23 2b       	or	r18, r19
 194:	09 f4       	brne	.+2      	; 0x198 <display_output_enabled+0x2c>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <display_count_enabled>:
 19a:	e2 e0       	ldi	r30, 0x02	; 2
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	a0 85       	ldd	r26, Z+8	; 0x08
 1a0:	b1 85       	ldd	r27, Z+9	; 0x09
 1a2:	4c 91       	ld	r20, X
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	c9 01       	movw	r24, r18
 1aa:	02 84       	ldd	r0, Z+10	; 0x0a
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <display_count_enabled+0x18>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <display_count_enabled+0x14>
 1b6:	24 2f       	mov	r18, r20
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	28 23       	and	r18, r24
 1bc:	39 23       	and	r19, r25
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	23 2b       	or	r18, r19
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <display_count_enabled+0x2c>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <display_enable_output>:
 1c8:	ae e0       	ldi	r26, 0x0E	; 14
 1ca:	b1 e0       	ldi	r27, 0x01	; 1
 1cc:	18 96       	adiw	r26, 0x08	; 8
 1ce:	ed 91       	ld	r30, X+
 1d0:	fc 91       	ld	r31, X
 1d2:	19 97       	sbiw	r26, 0x09	; 9
 1d4:	20 81       	ld	r18, Z
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	1a 96       	adiw	r26, 0x0a	; 10
 1dc:	0c 90       	ld	r0, X
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <display_enable_output+0x1c>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <display_enable_output+0x18>
 1e8:	82 2b       	or	r24, r18
 1ea:	80 83       	st	Z, r24
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	85 ef       	ldi	r24, 0xF5	; 245
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 1f6:	08 95       	ret

000001f8 <display_disable_output>:
 1f8:	8e e0       	ldi	r24, 0x0E	; 14
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 35 04 	call	0x86a	; 0x86a <timer_reset>
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	85 ef       	ldi	r24, 0xF5	; 245
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	88 b1       	in	r24, 0x08	; 8
 212:	88 60       	ori	r24, 0x08	; 8
 214:	88 b9       	out	0x08, r24	; 8
 216:	08 95       	ret

00000218 <display_toggle_output>:
 218:	0e 94 b6 00 	call	0x16c	; 0x16c <display_output_enabled>
 21c:	88 23       	and	r24, r24
 21e:	19 f0       	breq	.+6      	; 0x226 <display_toggle_output+0xe>
 220:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <display_disable_output>
 224:	08 95       	ret
 226:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <display_enable_output>
 22a:	08 95       	ret

0000022c <display_set_number>:
 22c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	98 17       	cp	r25, r24
 232:	c0 f0       	brcs	.+48     	; 0x264 <display_set_number+0x38>
 234:	28 2f       	mov	r18, r24
 236:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 23a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <radix>
 23e:	63 2f       	mov	r22, r19
 240:	0e 94 a8 05 	call	0xb50	; 0xb50 <__udivmodqi4>
 244:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <digit1>
 248:	92 2f       	mov	r25, r18
 24a:	38 9f       	mul	r19, r24
 24c:	90 19       	sub	r25, r0
 24e:	11 24       	eor	r1, r1
 250:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <digit2>
 254:	62 2f       	mov	r22, r18
 256:	84 ef       	ldi	r24, 0xF4	; 244
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	08 95       	ret
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	08 95       	ret

0000026a <display_toggle_digit>:
 26a:	ee e0       	ldi	r30, 0x0E	; 14
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	a2 81       	ldd	r26, Z+2	; 0x02
 274:	b3 81       	ldd	r27, Z+3	; 0x03
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	a1 1d       	adc	r26, r1
 27a:	b1 1d       	adc	r27, r1
 27c:	80 83       	st	Z, r24
 27e:	91 83       	std	Z+1, r25	; 0x01
 280:	a2 83       	std	Z+2, r26	; 0x02
 282:	b3 83       	std	Z+3, r27	; 0x03
 284:	cf 01       	movw	r24, r30
 286:	0e 94 1f 04 	call	0x83e	; 0x83e <timer_elapsed>
 28a:	88 23       	and	r24, r24
 28c:	09 f4       	brne	.+2      	; 0x290 <display_toggle_digit+0x26>
 28e:	ac c0       	rjmp	.+344    	; 0x3e8 <display_toggle_digit+0x17e>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <current_digit>
 296:	91 11       	cpse	r25, r1
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_digit>
 29e:	81 11       	cpse	r24, r1
 2a0:	56 c0       	rjmp	.+172    	; 0x34e <display_toggle_digit+0xe4>
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	88 b9       	out	0x08, r24	; 8
 2a8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <digit1>
 2ac:	81 11       	cpse	r24, r1
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <display_toggle_digit+0x4e>
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	08 95       	ret
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	8b b9       	out	0x0b, r24	; 11
 2be:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <digit1>
 2c2:	9b b1       	in	r25, 0x0b	; 11
 2c4:	90 78       	andi	r25, 0x80	; 128
 2c6:	9b b9       	out	0x0b, r25	; 11
 2c8:	88 23       	and	r24, r24
 2ca:	01 f1       	breq	.+64     	; 0x30c <display_toggle_digit+0xa2>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	01 f1       	breq	.+64     	; 0x310 <display_toggle_digit+0xa6>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	01 f1       	breq	.+64     	; 0x314 <display_toggle_digit+0xaa>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	01 f1       	breq	.+64     	; 0x318 <display_toggle_digit+0xae>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	01 f1       	breq	.+64     	; 0x31c <display_toggle_digit+0xb2>
 2dc:	85 30       	cpi	r24, 0x05	; 5
 2de:	01 f1       	breq	.+64     	; 0x320 <display_toggle_digit+0xb6>
 2e0:	86 30       	cpi	r24, 0x06	; 6
 2e2:	01 f1       	breq	.+64     	; 0x324 <display_toggle_digit+0xba>
 2e4:	87 30       	cpi	r24, 0x07	; 7
 2e6:	79 f1       	breq	.+94     	; 0x346 <display_toggle_digit+0xdc>
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	f1 f0       	breq	.+60     	; 0x328 <display_toggle_digit+0xbe>
 2ec:	89 30       	cpi	r24, 0x09	; 9
 2ee:	f1 f0       	breq	.+60     	; 0x32c <display_toggle_digit+0xc2>
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	f1 f0       	breq	.+60     	; 0x330 <display_toggle_digit+0xc6>
 2f4:	8b 30       	cpi	r24, 0x0B	; 11
 2f6:	f1 f0       	breq	.+60     	; 0x334 <display_toggle_digit+0xca>
 2f8:	8c 30       	cpi	r24, 0x0C	; 12
 2fa:	f1 f0       	breq	.+60     	; 0x338 <display_toggle_digit+0xce>
 2fc:	8d 30       	cpi	r24, 0x0D	; 13
 2fe:	f1 f0       	breq	.+60     	; 0x33c <display_toggle_digit+0xd2>
 300:	8e 30       	cpi	r24, 0x0E	; 14
 302:	f1 f0       	breq	.+60     	; 0x340 <display_toggle_digit+0xd6>
 304:	8f 30       	cpi	r24, 0x0F	; 15
 306:	f1 f4       	brne	.+60     	; 0x344 <display_toggle_digit+0xda>
 308:	81 e7       	ldi	r24, 0x71	; 113
 30a:	1d c0       	rjmp	.+58     	; 0x346 <display_toggle_digit+0xdc>
 30c:	8f e3       	ldi	r24, 0x3F	; 63
 30e:	1b c0       	rjmp	.+54     	; 0x346 <display_toggle_digit+0xdc>
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	19 c0       	rjmp	.+50     	; 0x346 <display_toggle_digit+0xdc>
 314:	8b e5       	ldi	r24, 0x5B	; 91
 316:	17 c0       	rjmp	.+46     	; 0x346 <display_toggle_digit+0xdc>
 318:	8f e4       	ldi	r24, 0x4F	; 79
 31a:	15 c0       	rjmp	.+42     	; 0x346 <display_toggle_digit+0xdc>
 31c:	86 e6       	ldi	r24, 0x66	; 102
 31e:	13 c0       	rjmp	.+38     	; 0x346 <display_toggle_digit+0xdc>
 320:	8d e6       	ldi	r24, 0x6D	; 109
 322:	11 c0       	rjmp	.+34     	; 0x346 <display_toggle_digit+0xdc>
 324:	8d e7       	ldi	r24, 0x7D	; 125
 326:	0f c0       	rjmp	.+30     	; 0x346 <display_toggle_digit+0xdc>
 328:	8f e7       	ldi	r24, 0x7F	; 127
 32a:	0d c0       	rjmp	.+26     	; 0x346 <display_toggle_digit+0xdc>
 32c:	8f e6       	ldi	r24, 0x6F	; 111
 32e:	0b c0       	rjmp	.+22     	; 0x346 <display_toggle_digit+0xdc>
 330:	87 e7       	ldi	r24, 0x77	; 119
 332:	09 c0       	rjmp	.+18     	; 0x346 <display_toggle_digit+0xdc>
 334:	8c e7       	ldi	r24, 0x7C	; 124
 336:	07 c0       	rjmp	.+14     	; 0x346 <display_toggle_digit+0xdc>
 338:	89 e3       	ldi	r24, 0x39	; 57
 33a:	05 c0       	rjmp	.+10     	; 0x346 <display_toggle_digit+0xdc>
 33c:	8e e5       	ldi	r24, 0x5E	; 94
 33e:	03 c0       	rjmp	.+6      	; 0x346 <display_toggle_digit+0xdc>
 340:	89 e7       	ldi	r24, 0x79	; 121
 342:	01 c0       	rjmp	.+2      	; 0x346 <display_toggle_digit+0xdc>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	9b b1       	in	r25, 0x0b	; 11
 348:	89 2b       	or	r24, r25
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	08 95       	ret
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	80 68       	ori	r24, 0x80	; 128
 352:	8b b9       	out	0x0b, r24	; 11
 354:	88 b1       	in	r24, 0x08	; 8
 356:	87 7f       	andi	r24, 0xF7	; 247
 358:	88 b9       	out	0x08, r24	; 8
 35a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <digit2>
 35e:	9b b1       	in	r25, 0x0b	; 11
 360:	90 78       	andi	r25, 0x80	; 128
 362:	9b b9       	out	0x0b, r25	; 11
 364:	88 23       	and	r24, r24
 366:	01 f1       	breq	.+64     	; 0x3a8 <display_toggle_digit+0x13e>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	01 f1       	breq	.+64     	; 0x3ac <display_toggle_digit+0x142>
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	01 f1       	breq	.+64     	; 0x3b0 <display_toggle_digit+0x146>
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	01 f1       	breq	.+64     	; 0x3b4 <display_toggle_digit+0x14a>
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	01 f1       	breq	.+64     	; 0x3b8 <display_toggle_digit+0x14e>
 378:	85 30       	cpi	r24, 0x05	; 5
 37a:	01 f1       	breq	.+64     	; 0x3bc <display_toggle_digit+0x152>
 37c:	86 30       	cpi	r24, 0x06	; 6
 37e:	01 f1       	breq	.+64     	; 0x3c0 <display_toggle_digit+0x156>
 380:	87 30       	cpi	r24, 0x07	; 7
 382:	79 f1       	breq	.+94     	; 0x3e2 <display_toggle_digit+0x178>
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	f1 f0       	breq	.+60     	; 0x3c4 <display_toggle_digit+0x15a>
 388:	89 30       	cpi	r24, 0x09	; 9
 38a:	f1 f0       	breq	.+60     	; 0x3c8 <display_toggle_digit+0x15e>
 38c:	8a 30       	cpi	r24, 0x0A	; 10
 38e:	f1 f0       	breq	.+60     	; 0x3cc <display_toggle_digit+0x162>
 390:	8b 30       	cpi	r24, 0x0B	; 11
 392:	f1 f0       	breq	.+60     	; 0x3d0 <display_toggle_digit+0x166>
 394:	8c 30       	cpi	r24, 0x0C	; 12
 396:	f1 f0       	breq	.+60     	; 0x3d4 <display_toggle_digit+0x16a>
 398:	8d 30       	cpi	r24, 0x0D	; 13
 39a:	f1 f0       	breq	.+60     	; 0x3d8 <display_toggle_digit+0x16e>
 39c:	8e 30       	cpi	r24, 0x0E	; 14
 39e:	f1 f0       	breq	.+60     	; 0x3dc <display_toggle_digit+0x172>
 3a0:	8f 30       	cpi	r24, 0x0F	; 15
 3a2:	f1 f4       	brne	.+60     	; 0x3e0 <display_toggle_digit+0x176>
 3a4:	81 e7       	ldi	r24, 0x71	; 113
 3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <display_toggle_digit+0x178>
 3a8:	8f e3       	ldi	r24, 0x3F	; 63
 3aa:	1b c0       	rjmp	.+54     	; 0x3e2 <display_toggle_digit+0x178>
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	19 c0       	rjmp	.+50     	; 0x3e2 <display_toggle_digit+0x178>
 3b0:	8b e5       	ldi	r24, 0x5B	; 91
 3b2:	17 c0       	rjmp	.+46     	; 0x3e2 <display_toggle_digit+0x178>
 3b4:	8f e4       	ldi	r24, 0x4F	; 79
 3b6:	15 c0       	rjmp	.+42     	; 0x3e2 <display_toggle_digit+0x178>
 3b8:	86 e6       	ldi	r24, 0x66	; 102
 3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <display_toggle_digit+0x178>
 3bc:	8d e6       	ldi	r24, 0x6D	; 109
 3be:	11 c0       	rjmp	.+34     	; 0x3e2 <display_toggle_digit+0x178>
 3c0:	8d e7       	ldi	r24, 0x7D	; 125
 3c2:	0f c0       	rjmp	.+30     	; 0x3e2 <display_toggle_digit+0x178>
 3c4:	8f e7       	ldi	r24, 0x7F	; 127
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <display_toggle_digit+0x178>
 3c8:	8f e6       	ldi	r24, 0x6F	; 111
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <display_toggle_digit+0x178>
 3cc:	87 e7       	ldi	r24, 0x77	; 119
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <display_toggle_digit+0x178>
 3d0:	8c e7       	ldi	r24, 0x7C	; 124
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <display_toggle_digit+0x178>
 3d4:	89 e3       	ldi	r24, 0x39	; 57
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <display_toggle_digit+0x178>
 3d8:	8e e5       	ldi	r24, 0x5E	; 94
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <display_toggle_digit+0x178>
 3dc:	89 e7       	ldi	r24, 0x79	; 121
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <display_toggle_digit+0x178>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	9b b1       	in	r25, 0x0b	; 11
 3e4:	89 2b       	or	r24, r25
 3e6:	8b b9       	out	0x0b, r24	; 11
 3e8:	08 95       	ret

000003ea <display_count>:
 3ea:	e2 e0       	ldi	r30, 0x02	; 2
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	a2 81       	ldd	r26, Z+2	; 0x02
 3f4:	b3 81       	ldd	r27, Z+3	; 0x03
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	a1 1d       	adc	r26, r1
 3fa:	b1 1d       	adc	r27, r1
 3fc:	80 83       	st	Z, r24
 3fe:	91 83       	std	Z+1, r25	; 0x01
 400:	a2 83       	std	Z+2, r26	; 0x02
 402:	b3 83       	std	Z+3, r27	; 0x03
 404:	cf 01       	movw	r24, r30
 406:	0e 94 1f 04 	call	0x83e	; 0x83e <timer_elapsed>
 40a:	88 23       	and	r24, r24
 40c:	09 f1       	breq	.+66     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 40e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count_direction>
 412:	81 11       	cpse	r24, r1
 414:	0d c0       	rjmp	.+26     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 416:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <number>
 41a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41e:	89 17       	cp	r24, r25
 420:	18 f0       	brcs	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 422:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <number>
 426:	10 c0       	rjmp	.+32     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 42e:	0c c0       	rjmp	.+24     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 430:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <number>
 434:	81 11       	cpse	r24, r1
 436:	05 c0       	rjmp	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 440:	03 c0       	rjmp	.+6      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 442:	81 50       	subi	r24, 0x01	; 1
 444:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 448:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <number>
 44c:	0e 94 16 01 	call	0x22c	; 0x22c <display_set_number>
 450:	08 95       	ret

00000452 <display_toggle_count_direction>:
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count_direction>
 458:	81 11       	cpse	r24, r1
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <count_direction>
 460:	87 ef       	ldi	r24, 0xF7	; 247
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 468:	08 95       	ret

0000046a <display_enable_count>:
*                         - self: Pekare till timern som timergenererat
*                                 avbrott ska aktiveras på.
********************************************************************************/
static inline void timer_enable_interrupt(struct timer* self)
{
   *(self->timsk) |= (1 << self->timsk_bit);
 46a:	a2 e0       	ldi	r26, 0x02	; 2
 46c:	b1 e0       	ldi	r27, 0x01	; 1
 46e:	18 96       	adiw	r26, 0x08	; 8
 470:	ed 91       	ld	r30, X+
 472:	fc 91       	ld	r31, X
 474:	19 97       	sbiw	r26, 0x09	; 9
 476:	20 81       	ld	r18, Z
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	1a 96       	adiw	r26, 0x0a	; 10
 47e:	0c 90       	ld	r0, X
 480:	02 c0       	rjmp	.+4      	; 0x486 <display_enable_count+0x1c>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <display_enable_count+0x18>
 48a:	82 2b       	or	r24, r18
 48c:	80 83       	st	Z, r24
*                       (via anrop av funktionen display_set_count).
********************************************************************************/
void display_enable_count(void)
{
   timer_enable_interrupt(&timer_count_speed);
   eeprom_write_byte(EEPROM_COUNT_ENABLED, 1);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	86 ef       	ldi	r24, 0xF6	; 246
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 498:	08 95       	ret

0000049a <display_init>:
*               aktiv display. Slutligen initieras timer_count_speed så att
*               uppräkning som default sker en gång per sekund.
********************************************************************************/
void display_init(void)
{
   DDRD = 0xFF;
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	8a b9       	out	0x0a, r24	; 10
   DDRC |= (1 << DISPLAY2_CATHODE);
 49e:	87 b1       	in	r24, 0x07	; 7
 4a0:	88 60       	ori	r24, 0x08	; 8
 4a2:	87 b9       	out	0x07, r24	; 7
   DISPLAY1_OFF;
 4a4:	8b b1       	in	r24, 0x0b	; 11
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	8b b9       	out	0x0b, r24	; 11
   DISPLAY2_OFF;
 4aa:	88 b1       	in	r24, 0x08	; 8
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	88 b9       	out	0x08, r24	; 8

   timer_init(&timer_digit, TIMER_SEL_1, 1);
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	40 e8       	ldi	r20, 0x80	; 128
 4b6:	5f e3       	ldi	r21, 0x3F	; 63
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	8e e0       	ldi	r24, 0x0E	; 14
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <timer_init>
   timer_init(&timer_count_speed, TIMER_SEL_2, 1000);
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	4a e7       	ldi	r20, 0x7A	; 122
 4c8:	54 e4       	ldi	r21, 0x44	; 68
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <timer_init>
*                         något är sparat. Om vi har gjort det så läses värdena
                          in.
********************************************************************************/
static inline void display_check_eeprom(void)
{
	if (eeprom_read_byte(EEPROM_INIT) == 0)
 4d4:	88 ef       	ldi	r24, 0xF8	; 248
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <eeprom_read_byte>
 4dc:	81 11       	cpse	r24, r1
 4de:	1d c0       	rjmp	.+58     	; 0x51a <display_init+0x80>
	{
		display_set_number(eeprom_read_byte(EEPROM_NUMBER));
 4e0:	84 ef       	ldi	r24, 0xF4	; 244
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <eeprom_read_byte>
 4e8:	0e 94 16 01 	call	0x22c	; 0x22c <display_set_number>
		count_direction = (enum display_count_direction)eeprom_read_byte(EEPROM_COUNT_DIRECTION);
 4ec:	87 ef       	ldi	r24, 0xF7	; 247
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <eeprom_read_byte>
 4f4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <count_direction>
		
		if (eeprom_read_byte(EEPROM_OUTPUT_ENABLED) == 1)
 4f8:	85 ef       	ldi	r24, 0xF5	; 245
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <eeprom_read_byte>
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	11 f4       	brne	.+4      	; 0x508 <display_init+0x6e>
		{
			display_enable_output();
 504:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <display_enable_output>
		}
		
	    if (eeprom_read_byte(EEPROM_COUNT_ENABLED) == 1)
 508:	86 ef       	ldi	r24, 0xF6	; 246
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <eeprom_read_byte>
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	e1 f4       	brne	.+56     	; 0x54c <display_init+0xb2>
		{
			display_enable_count();
 514:	0e 94 35 02 	call	0x46a	; 0x46a <display_enable_count>
 518:	08 95       	ret
		}
	}
	else
	{
	  eeprom_write_byte(EEPROM_NUMBER, 0);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	84 ef       	ldi	r24, 0xF4	; 244
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
	  eeprom_write_byte(EEPROM_OUTPUT_ENABLED, 0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	85 ef       	ldi	r24, 0xF5	; 245
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
	  eeprom_write_byte(EEPROM_COUNT_ENABLED, 0);
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	86 ef       	ldi	r24, 0xF6	; 246
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
	  eeprom_write_byte(EEPROM_COUNT_DIRECTION, (uint8_t)(DISPLAY_COUNT_DIRECTION_UP));
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	87 ef       	ldi	r24, 0xF7	; 247
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
	  eeprom_write_byte(EEPROM_INIT, 0);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	88 ef       	ldi	r24, 0xF8	; 248
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 54c:	08 95       	ret

0000054e <display_disable_count>:
* display_disable_count: Inaktiverar upp- eller nedräkning av tal som skrivs ut
*                        på 7-segmentsdisplayerna.
********************************************************************************/
void display_disable_count(void)
{
   timer_reset(&timer_count_speed);
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 35 04 	call	0x86a	; 0x86a <timer_reset>
   eeprom_write_byte(EEPROM_COUNT_ENABLED, 0);
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	86 ef       	ldi	r24, 0xF6	; 246
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 bb 02 	call	0x576	; 0x576 <eeprom_write_byte>
 560:	08 95       	ret

00000562 <display_toggle_count>:
* display_toggle_count: Togglar upp- eller nedräkning av tal som skrivs ut på
*                       7-segmentsdisplayerna.
**********ö**********************************************************************/
void display_toggle_count(void)
{
   if (display_count_enabled())
 562:	0e 94 cd 00 	call	0x19a	; 0x19a <display_count_enabled>
 566:	88 23       	and	r24, r24
 568:	19 f0       	breq	.+6      	; 0x570 <display_toggle_count+0xe>
   {
      display_disable_count();
 56a:	0e 94 a7 02 	call	0x54e	; 0x54e <display_disable_count>
 56e:	08 95       	ret
	  
   }
   else
   {
      display_enable_count();
 570:	0e 94 35 02 	call	0x46a	; 0x46a <display_enable_count>
 574:	08 95       	ret

00000576 <eeprom_write_byte>:
{
   if (address_low > EEPROM_ADDRESS_MAX - 1) return 1;
   eeprom_write_byte(address_low, (uint8_t)(data));
   eeprom_write_byte(address_low + 1, (uint8_t)(data >> 8));
   return 0;
}
 576:	81 15       	cp	r24, r1
 578:	24 e0       	ldi	r18, 0x04	; 4
 57a:	92 07       	cpc	r25, r18
 57c:	80 f4       	brcc	.+32     	; 0x59e <eeprom_write_byte+0x28>
 57e:	f9 99       	sbic	0x1f, 1	; 31
 580:	fe cf       	rjmp	.-4      	; 0x57e <eeprom_write_byte+0x8>
 582:	92 bd       	out	0x22, r25	; 34
 584:	81 bd       	out	0x21, r24	; 33
 586:	60 bd       	out	0x20, r22	; 32
 588:	f8 94       	cli
 58a:	8f b3       	in	r24, 0x1f	; 31
 58c:	84 60       	ori	r24, 0x04	; 4
 58e:	8f bb       	out	0x1f, r24	; 31
 590:	8f b3       	in	r24, 0x1f	; 31
 592:	82 60       	ori	r24, 0x02	; 2
 594:	8f bb       	out	0x1f, r24	; 31
 596:	78 94       	sei
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	08 95       	ret
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	08 95       	ret

000005a4 <eeprom_read_byte>:
*
*                   - address: Adressen i EEPROM-minnet som ska läsas av.
********************************************************************************/
uint8_t eeprom_read_byte(const uint16_t address)
{
   if (address > EEPROM_ADDRESS_MAX) return 0;
 5a4:	81 15       	cp	r24, r1
 5a6:	24 e0       	ldi	r18, 0x04	; 4
 5a8:	92 07       	cpc	r25, r18
 5aa:	48 f4       	brcc	.+18     	; 0x5be <eeprom_read_byte+0x1a>
   while (EECR & (1 << EEPE));
 5ac:	f9 99       	sbic	0x1f, 1	; 31
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <eeprom_read_byte+0x8>
   EEAR = address;
 5b0:	92 bd       	out	0x22, r25	; 34
 5b2:	81 bd       	out	0x21, r24	; 33
   EECR |= (1 << EERE);
 5b4:	8f b3       	in	r24, 0x1f	; 31
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	8f bb       	out	0x1f, r24	; 31
   return EEDR;
 5ba:	80 b5       	in	r24, 0x20	; 32
 5bc:	08 95       	ret
*
*                   - address: Adressen i EEPROM-minnet som ska läsas av.
********************************************************************************/
uint8_t eeprom_read_byte(const uint16_t address)
{
   if (address > EEPROM_ADDRESS_MAX) return 0;
 5be:	80 e0       	ldi	r24, 0x00	; 0
   while (EECR & (1 << EEPE));
   EEAR = address;
   EECR |= (1 << EERE);
   return EEDR;
}
 5c0:	08 95       	ret

000005c2 <__vector_3>:
* isr.c: Innehåller avbrottsrutiner.
********************************************************************************/
#include "header.h"

ISR (PCINT0_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
*
*                    - self: Pekare till tryckknappen som ska läsas av.
********************************************************************************/
static inline bool button_is_pressed(const struct button* self)
{
   return (*(self->input) & (1 << self->pin));
 5e4:	eb e3       	ldi	r30, 0x3B	; 59
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	a3 81       	ldd	r26, Z+3	; 0x03
 5ea:	b4 81       	ldd	r27, Z+4	; 0x04
 5ec:	4c 91       	ld	r20, X
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	9c 01       	movw	r18, r24
 5f4:	00 80       	ld	r0, Z
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__vector_3+0x3a>
 5f8:	22 0f       	add	r18, r18
 5fa:	33 1f       	adc	r19, r19
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <__vector_3+0x36>
 600:	84 2f       	mov	r24, r20
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	82 23       	and	r24, r18
 606:	93 23       	and	r25, r19
	if (button_is_pressed(&button1))
 608:	89 2b       	or	r24, r25
 60a:	19 f0       	breq	.+6      	; 0x612 <__vector_3+0x50>
	{
		display_toggle_count();
 60c:	0e 94 b1 02 	call	0x562	; 0x562 <display_toggle_count>
 610:	2d c0       	rjmp	.+90     	; 0x66c <__vector_3+0xaa>
 612:	ef e1       	ldi	r30, 0x1F	; 31
 614:	f1 e0       	ldi	r31, 0x01	; 1
 616:	a3 81       	ldd	r26, Z+3	; 0x03
 618:	b4 81       	ldd	r27, Z+4	; 0x04
 61a:	4c 91       	ld	r20, X
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	9c 01       	movw	r18, r24
 622:	00 80       	ld	r0, Z
 624:	02 c0       	rjmp	.+4      	; 0x62a <__vector_3+0x68>
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <__vector_3+0x64>
 62e:	84 2f       	mov	r24, r20
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	82 23       	and	r24, r18
 634:	93 23       	and	r25, r19
		
	}
    else if (button_is_pressed(&button2))
 636:	89 2b       	or	r24, r25
 638:	19 f0       	breq	.+6      	; 0x640 <__vector_3+0x7e>
	{
		display_toggle_count_direction();
 63a:	0e 94 29 02 	call	0x452	; 0x452 <display_toggle_count_direction>
 63e:	16 c0       	rjmp	.+44     	; 0x66c <__vector_3+0xaa>
 640:	e7 e2       	ldi	r30, 0x27	; 39
 642:	f1 e0       	ldi	r31, 0x01	; 1
 644:	a3 81       	ldd	r26, Z+3	; 0x03
 646:	b4 81       	ldd	r27, Z+4	; 0x04
 648:	4c 91       	ld	r20, X
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	9c 01       	movw	r18, r24
 650:	00 80       	ld	r0, Z
 652:	02 c0       	rjmp	.+4      	; 0x658 <__vector_3+0x96>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <__vector_3+0x92>
 65c:	84 2f       	mov	r24, r20
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	82 23       	and	r24, r18
 662:	93 23       	and	r25, r19
		
	}
	else if (button_is_pressed(&button3))
 664:	89 2b       	or	r24, r25
 666:	11 f0       	breq	.+4      	; 0x66c <__vector_3+0xaa>
	{
		display_toggle_output();
 668:	0e 94 0c 01 	call	0x218	; 0x218 <display_toggle_output>
		
	}
}
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	bf 91       	pop	r27
 672:	af 91       	pop	r26
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	7f 91       	pop	r23
 67a:	6f 91       	pop	r22
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_11>:
*                          millisekund när timern är aktiverad. En gång per
*                          millisekund togglas talet utskrivet på 
*                          7-segmentsdisplayerna mellan tiotal och ental.
********************************************************************************/
ISR (TIMER1_COMPA_vect)
{
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31
   display_toggle_digit();
 6b0:	0e 94 35 01 	call	0x26a	; 0x26a <display_toggle_digit>
   return;
}
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <__vector_9>:
*                        Timer 2 i Normal Mode, vilket sker var 0.128:e
*                        millisekund när timern är aktiverad. En gång per sekund
*                        inkrementeras talet utskrivet på 7-segmentsdisplayerna.
********************************************************************************/
ISR (TIMER2_OVF_vect)
{
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	0f 92       	push	r0
 6de:	11 24       	eor	r1, r1
 6e0:	2f 93       	push	r18
 6e2:	3f 93       	push	r19
 6e4:	4f 93       	push	r20
 6e6:	5f 93       	push	r21
 6e8:	6f 93       	push	r22
 6ea:	7f 93       	push	r23
 6ec:	8f 93       	push	r24
 6ee:	9f 93       	push	r25
 6f0:	af 93       	push	r26
 6f2:	bf 93       	push	r27
 6f4:	ef 93       	push	r30
 6f6:	ff 93       	push	r31
   display_count();
 6f8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <display_count>
   return;
}
 6fc:	ff 91       	pop	r31
 6fe:	ef 91       	pop	r30
 700:	bf 91       	pop	r27
 702:	af 91       	pop	r26
 704:	9f 91       	pop	r25
 706:	8f 91       	pop	r24
 708:	7f 91       	pop	r23
 70a:	6f 91       	pop	r22
 70c:	5f 91       	pop	r21
 70e:	4f 91       	pop	r20
 710:	3f 91       	pop	r19
 712:	2f 91       	pop	r18
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <__vector_16>:

ISR (TIMER0_OVF_vect)
{
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
	
	
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	1f 90       	pop	r1
 730:	18 95       	reti

00000732 <main>:
*
*           - timeout_ms: Timeout mätt i millisekunder.
********************************************************************************/
static inline void wdt_init(const enum wdt_timeout timeout_ms)
{
   asm("CLI");
 732:	f8 94       	cli
   WDTCSR = (1 << WDE) | (1 << WDCE);
 734:	e0 e6       	ldi	r30, 0x60	; 96
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	88 e1       	ldi	r24, 0x18	; 24
 73a:	80 83       	st	Z, r24
   WDTCSR = (1 << WDE) | (uint8_t)(timeout_ms);
 73c:	8e e0       	ldi	r24, 0x0E	; 14
 73e:	80 83       	st	Z, r24
   asm("SEI");
 740:	78 94       	sei
   WDTCSR &= ~(1 << WDE);
 742:	80 81       	ld	r24, Z
 744:	87 7f       	andi	r24, 0xF7	; 247
 746:	80 83       	st	Z, r24
* wdt_reset: Återställer Watchdog-timern, vilket måste ske kontinuerligt innan
*            timern löper ut för att undvika systemåterställning eller avbrott.
********************************************************************************/
static inline void wdt_reset(void)
{
   asm("CLI");
 748:	f8 94       	cli
   asm("WDR");
 74a:	a8 95       	wdr
   MCUSR &= ~(1 << WDRF);
 74c:	84 b7       	in	r24, 0x34	; 52
 74e:	87 7f       	andi	r24, 0xF7	; 247
 750:	84 bf       	out	0x34, r24	; 52
   asm("SEI");
 752:	78 94       	sei
*                       äger rum ifall Watchdog-timern löper ut.
********************************************************************************/
static inline void wdt_enable_interrupt(void)
{
   wdt_reset();
   WDTCSR |= (1 << WDIE);
 754:	80 81       	ld	r24, Z
 756:	80 64       	ori	r24, 0x40	; 64
 758:	80 83       	st	Z, r24
static inline void setup(void)
{
   wdt_init(WDT_TIMEOUT_1024_MS);
   wdt_enable_interrupt();
   
   button_init(&button1, B3);
 75a:	6b e0       	ldi	r22, 0x0B	; 11
 75c:	8b e3       	ldi	r24, 0x3B	; 59
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
   button_init(&button2, B4);
 764:	6c e0       	ldi	r22, 0x0C	; 12
 766:	8f e1       	ldi	r24, 0x1F	; 31
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
   button_init(&button3, B5);
 76e:	6d e0       	ldi	r22, 0x0D	; 13
 770:	87 e2       	ldi	r24, 0x27	; 39
 772:	91 e0       	ldi	r25, 0x01	; 1
 774:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
   
   button_enable_interrupt(&button1);
 778:	8b e3       	ldi	r24, 0x3B	; 59
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 99 00 	call	0x132	; 0x132 <button_enable_interrupt>
   button_enable_interrupt(&button2);
 780:	8f e1       	ldi	r24, 0x1F	; 31
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	0e 94 99 00 	call	0x132	; 0x132 <button_enable_interrupt>
   button_enable_interrupt(&button3);
 788:	87 e2       	ldi	r24, 0x27	; 39
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 99 00 	call	0x132	; 0x132 <button_enable_interrupt>
   
   display_init();
 790:	0e 94 4d 02 	call	0x49a	; 0x49a <display_init>
* wdt_reset: Återställer Watchdog-timern, vilket måste ske kontinuerligt innan
*            timern löper ut för att undvika systemåterställning eller avbrott.
********************************************************************************/
static inline void wdt_reset(void)
{
   asm("CLI");
 794:	f8 94       	cli
   asm("WDR");
 796:	a8 95       	wdr
   MCUSR &= ~(1 << WDRF);
 798:	84 b7       	in	r24, 0x34	; 52
 79a:	87 7f       	andi	r24, 0xF7	; 247
 79c:	84 bf       	out	0x34, r24	; 52
   asm("SEI");
 79e:	78 94       	sei
 7a0:	f9 cf       	rjmp	.-14     	; 0x794 <main+0x62>

000007a2 <timer_init_circuit>:
 7a2:	fc 01       	movw	r30, r24
 7a4:	83 85       	ldd	r24, Z+11	; 0x0b
 7a6:	81 11       	cpse	r24, r1
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <timer_init_circuit+0x18>
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	85 bd       	out	0x25, r24	; 37
 7ae:	8e e6       	ldi	r24, 0x6E	; 110
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	91 87       	std	Z+9, r25	; 0x09
 7b4:	80 87       	std	Z+8, r24	; 0x08
 7b6:	12 86       	std	Z+10, r1	; 0x0a
 7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <timer_init_circuit+0x4e>
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	81 f4       	brne	.+32     	; 0x7de <timer_init_circuit+0x3c>
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7d0:	8f e6       	ldi	r24, 0x6F	; 111
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	91 87       	std	Z+9, r25	; 0x09
 7d6:	80 87       	std	Z+8, r24	; 0x08
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	82 87       	std	Z+10, r24	; 0x0a
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <timer_init_circuit+0x4e>
 7de:	82 30       	cpi	r24, 0x02	; 2
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <timer_init_circuit+0x4e>
 7e2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 7e6:	80 e7       	ldi	r24, 0x70	; 112
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	91 87       	std	Z+9, r25	; 0x09
 7ec:	80 87       	std	Z+8, r24	; 0x08
 7ee:	12 86       	std	Z+10, r1	; 0x0a
 7f0:	78 94       	sei
 7f2:	08 95       	ret

000007f4 <timer_init>:
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	ec 01       	movw	r28, r24
 7fc:	16 2f       	mov	r17, r22
 7fe:	ca 01       	movw	r24, r20
 800:	b9 01       	movw	r22, r18
 802:	18 82       	st	Y, r1
 804:	19 82       	std	Y+1, r1	; 0x01
 806:	1a 82       	std	Y+2, r1	; 0x02
 808:	1b 82       	std	Y+3, r1	; 0x03
 80a:	2f e6       	ldi	r18, 0x6F	; 111
 80c:	32 e1       	ldi	r19, 0x12	; 18
 80e:	43 e0       	ldi	r20, 0x03	; 3
 810:	5e e3       	ldi	r21, 0x3E	; 62
 812:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3>
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	5f e3       	ldi	r21, 0x3F	; 63
 81e:	0e 94 4a 04 	call	0x894	; 0x894 <__addsf3>
 822:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixunssfsi>
 826:	6c 83       	std	Y+4, r22	; 0x04
 828:	7d 83       	std	Y+5, r23	; 0x05
 82a:	8e 83       	std	Y+6, r24	; 0x06
 82c:	9f 83       	std	Y+7, r25	; 0x07
 82e:	1b 87       	std	Y+11, r17	; 0x0b
 830:	ce 01       	movw	r24, r28
 832:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <timer_init_circuit>
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	08 95       	ret

0000083e <timer_elapsed>:
*                inför nästa uppräkning.
*
*                - self: Pekare till timern som ska kontrolleras.
********************************************************************************/
bool timer_elapsed(struct timer* self)
{
 83e:	fc 01       	movw	r30, r24
   if (self->counter >= self->max_count)
 840:	40 81       	ld	r20, Z
 842:	51 81       	ldd	r21, Z+1	; 0x01
 844:	62 81       	ldd	r22, Z+2	; 0x02
 846:	73 81       	ldd	r23, Z+3	; 0x03
 848:	84 81       	ldd	r24, Z+4	; 0x04
 84a:	95 81       	ldd	r25, Z+5	; 0x05
 84c:	a6 81       	ldd	r26, Z+6	; 0x06
 84e:	b7 81       	ldd	r27, Z+7	; 0x07
 850:	48 17       	cp	r20, r24
 852:	59 07       	cpc	r21, r25
 854:	6a 07       	cpc	r22, r26
 856:	7b 07       	cpc	r23, r27
 858:	30 f0       	brcs	.+12     	; 0x866 <timer_elapsed+0x28>
   {
     self->counter = 0;
 85a:	10 82       	st	Z, r1
 85c:	11 82       	std	Z+1, r1	; 0x01
 85e:	12 82       	std	Z+2, r1	; 0x02
 860:	13 82       	std	Z+3, r1	; 0x03
     return true;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	08 95       	ret
   }
   else
   {
      return false;
 866:	80 e0       	ldi	r24, 0x00	; 0
   }
}
 868:	08 95       	ret

0000086a <timer_reset>:
* timer_reset: Återställer angiven timer till startläget.
*
               - self: Pekare till timern som ska återställas.
********************************************************************************/
void timer_reset(struct timer* self)
{
 86a:	fc 01       	movw	r30, r24
*                          - self: Pekare till timern som timergenererat
*                                  avbrott ska inaktiveras på.
********************************************************************************/
static inline void timer_disable_interrupt(struct timer* self)
{
   *(self->timsk) &= ~(1 << self->timsk_bit);
 86c:	a0 85       	ldd	r26, Z+8	; 0x08
 86e:	b1 85       	ldd	r27, Z+9	; 0x09
 870:	8c 91       	ld	r24, X
 872:	21 e0       	ldi	r18, 0x01	; 1
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	02 84       	ldd	r0, Z+10	; 0x0a
 878:	02 c0       	rjmp	.+4      	; 0x87e <timer_reset+0x14>
 87a:	22 0f       	add	r18, r18
 87c:	33 1f       	adc	r19, r19
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <timer_reset+0x10>
 882:	20 95       	com	r18
 884:	28 23       	and	r18, r24
 886:	2c 93       	st	X, r18
   timer_disable_interrupt(self);
   self->counter = 0;
 888:	10 82       	st	Z, r1
 88a:	11 82       	std	Z+1, r1	; 0x01
 88c:	12 82       	std	Z+2, r1	; 0x02
 88e:	13 82       	std	Z+3, r1	; 0x03
 890:	08 95       	ret

00000892 <__subsf3>:
 892:	50 58       	subi	r21, 0x80	; 128

00000894 <__addsf3>:
 894:	bb 27       	eor	r27, r27
 896:	aa 27       	eor	r26, r26
 898:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__addsf3x>
 89c:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_round>
 8a0:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_pscA>
 8a4:	38 f0       	brcs	.+14     	; 0x8b4 <__addsf3+0x20>
 8a6:	0e 94 67 05 	call	0xace	; 0xace <__fp_pscB>
 8aa:	20 f0       	brcs	.+8      	; 0x8b4 <__addsf3+0x20>
 8ac:	39 f4       	brne	.+14     	; 0x8bc <__addsf3+0x28>
 8ae:	9f 3f       	cpi	r25, 0xFF	; 255
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <__addsf3+0x24>
 8b2:	26 f4       	brtc	.+8      	; 0x8bc <__addsf3+0x28>
 8b4:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_nan>
 8b8:	0e f4       	brtc	.+2      	; 0x8bc <__addsf3+0x28>
 8ba:	e0 95       	com	r30
 8bc:	e7 fb       	bst	r30, 7
 8be:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_inf>

000008c2 <__addsf3x>:
 8c2:	e9 2f       	mov	r30, r25
 8c4:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_split3>
 8c8:	58 f3       	brcs	.-42     	; 0x8a0 <__addsf3+0xc>
 8ca:	ba 17       	cp	r27, r26
 8cc:	62 07       	cpc	r22, r18
 8ce:	73 07       	cpc	r23, r19
 8d0:	84 07       	cpc	r24, r20
 8d2:	95 07       	cpc	r25, r21
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__addsf3x+0x1c>
 8d6:	79 f4       	brne	.+30     	; 0x8f6 <__addsf3x+0x34>
 8d8:	a6 f5       	brtc	.+104    	; 0x942 <__stack+0x43>
 8da:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_zero>
 8de:	0e f4       	brtc	.+2      	; 0x8e2 <__addsf3x+0x20>
 8e0:	e0 95       	com	r30
 8e2:	0b 2e       	mov	r0, r27
 8e4:	ba 2f       	mov	r27, r26
 8e6:	a0 2d       	mov	r26, r0
 8e8:	0b 01       	movw	r0, r22
 8ea:	b9 01       	movw	r22, r18
 8ec:	90 01       	movw	r18, r0
 8ee:	0c 01       	movw	r0, r24
 8f0:	ca 01       	movw	r24, r20
 8f2:	a0 01       	movw	r20, r0
 8f4:	11 24       	eor	r1, r1
 8f6:	ff 27       	eor	r31, r31
 8f8:	59 1b       	sub	r21, r25
 8fa:	99 f0       	breq	.+38     	; 0x922 <__stack+0x23>
 8fc:	59 3f       	cpi	r21, 0xF9	; 249
 8fe:	50 f4       	brcc	.+20     	; 0x914 <__stack+0x15>
 900:	50 3e       	cpi	r21, 0xE0	; 224
 902:	68 f1       	brcs	.+90     	; 0x95e <__stack+0x5f>
 904:	1a 16       	cp	r1, r26
 906:	f0 40       	sbci	r31, 0x00	; 0
 908:	a2 2f       	mov	r26, r18
 90a:	23 2f       	mov	r18, r19
 90c:	34 2f       	mov	r19, r20
 90e:	44 27       	eor	r20, r20
 910:	58 5f       	subi	r21, 0xF8	; 248
 912:	f3 cf       	rjmp	.-26     	; 0x8fa <__addsf3x+0x38>
 914:	46 95       	lsr	r20
 916:	37 95       	ror	r19
 918:	27 95       	ror	r18
 91a:	a7 95       	ror	r26
 91c:	f0 40       	sbci	r31, 0x00	; 0
 91e:	53 95       	inc	r21
 920:	c9 f7       	brne	.-14     	; 0x914 <__stack+0x15>
 922:	7e f4       	brtc	.+30     	; 0x942 <__stack+0x43>
 924:	1f 16       	cp	r1, r31
 926:	ba 0b       	sbc	r27, r26
 928:	62 0b       	sbc	r22, r18
 92a:	73 0b       	sbc	r23, r19
 92c:	84 0b       	sbc	r24, r20
 92e:	ba f0       	brmi	.+46     	; 0x95e <__stack+0x5f>
 930:	91 50       	subi	r25, 0x01	; 1
 932:	a1 f0       	breq	.+40     	; 0x95c <__stack+0x5d>
 934:	ff 0f       	add	r31, r31
 936:	bb 1f       	adc	r27, r27
 938:	66 1f       	adc	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	c2 f7       	brpl	.-16     	; 0x930 <__stack+0x31>
 940:	0e c0       	rjmp	.+28     	; 0x95e <__stack+0x5f>
 942:	ba 0f       	add	r27, r26
 944:	62 1f       	adc	r22, r18
 946:	73 1f       	adc	r23, r19
 948:	84 1f       	adc	r24, r20
 94a:	48 f4       	brcc	.+18     	; 0x95e <__stack+0x5f>
 94c:	87 95       	ror	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	9e 3f       	cpi	r25, 0xFE	; 254
 958:	08 f0       	brcs	.+2      	; 0x95c <__stack+0x5d>
 95a:	b0 cf       	rjmp	.-160    	; 0x8bc <__addsf3+0x28>
 95c:	93 95       	inc	r25
 95e:	88 0f       	add	r24, r24
 960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x65>
 962:	99 27       	eor	r25, r25
 964:	ee 0f       	add	r30, r30
 966:	97 95       	ror	r25
 968:	87 95       	ror	r24
 96a:	08 95       	ret

0000096c <__divsf3>:
 96c:	0e 94 ca 04 	call	0x994	; 0x994 <__divsf3x>
 970:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_round>
 974:	0e 94 67 05 	call	0xace	; 0xace <__fp_pscB>
 978:	58 f0       	brcs	.+22     	; 0x990 <__divsf3+0x24>
 97a:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_pscA>
 97e:	40 f0       	brcs	.+16     	; 0x990 <__divsf3+0x24>
 980:	29 f4       	brne	.+10     	; 0x98c <__divsf3+0x20>
 982:	5f 3f       	cpi	r21, 0xFF	; 255
 984:	29 f0       	breq	.+10     	; 0x990 <__divsf3+0x24>
 986:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_inf>
 98a:	51 11       	cpse	r21, r1
 98c:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_szero>
 990:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_nan>

00000994 <__divsf3x>:
 994:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_split3>
 998:	68 f3       	brcs	.-38     	; 0x974 <__divsf3+0x8>

0000099a <__divsf3_pse>:
 99a:	99 23       	and	r25, r25
 99c:	b1 f3       	breq	.-20     	; 0x98a <__divsf3+0x1e>
 99e:	55 23       	and	r21, r21
 9a0:	91 f3       	breq	.-28     	; 0x986 <__divsf3+0x1a>
 9a2:	95 1b       	sub	r25, r21
 9a4:	55 0b       	sbc	r21, r21
 9a6:	bb 27       	eor	r27, r27
 9a8:	aa 27       	eor	r26, r26
 9aa:	62 17       	cp	r22, r18
 9ac:	73 07       	cpc	r23, r19
 9ae:	84 07       	cpc	r24, r20
 9b0:	38 f0       	brcs	.+14     	; 0x9c0 <__divsf3_pse+0x26>
 9b2:	9f 5f       	subi	r25, 0xFF	; 255
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	22 0f       	add	r18, r18
 9b8:	33 1f       	adc	r19, r19
 9ba:	44 1f       	adc	r20, r20
 9bc:	aa 1f       	adc	r26, r26
 9be:	a9 f3       	breq	.-22     	; 0x9aa <__divsf3_pse+0x10>
 9c0:	35 d0       	rcall	.+106    	; 0xa2c <__divsf3_pse+0x92>
 9c2:	0e 2e       	mov	r0, r30
 9c4:	3a f0       	brmi	.+14     	; 0x9d4 <__divsf3_pse+0x3a>
 9c6:	e0 e8       	ldi	r30, 0x80	; 128
 9c8:	32 d0       	rcall	.+100    	; 0xa2e <__divsf3_pse+0x94>
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	e6 95       	lsr	r30
 9d0:	00 1c       	adc	r0, r0
 9d2:	ca f7       	brpl	.-14     	; 0x9c6 <__divsf3_pse+0x2c>
 9d4:	2b d0       	rcall	.+86     	; 0xa2c <__divsf3_pse+0x92>
 9d6:	fe 2f       	mov	r31, r30
 9d8:	29 d0       	rcall	.+82     	; 0xa2c <__divsf3_pse+0x92>
 9da:	66 0f       	add	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	bb 1f       	adc	r27, r27
 9e2:	26 17       	cp	r18, r22
 9e4:	37 07       	cpc	r19, r23
 9e6:	48 07       	cpc	r20, r24
 9e8:	ab 07       	cpc	r26, r27
 9ea:	b0 e8       	ldi	r27, 0x80	; 128
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__divsf3_pse+0x56>
 9ee:	bb 0b       	sbc	r27, r27
 9f0:	80 2d       	mov	r24, r0
 9f2:	bf 01       	movw	r22, r30
 9f4:	ff 27       	eor	r31, r31
 9f6:	93 58       	subi	r25, 0x83	; 131
 9f8:	5f 4f       	sbci	r21, 0xFF	; 255
 9fa:	3a f0       	brmi	.+14     	; 0xa0a <__divsf3_pse+0x70>
 9fc:	9e 3f       	cpi	r25, 0xFE	; 254
 9fe:	51 05       	cpc	r21, r1
 a00:	78 f0       	brcs	.+30     	; 0xa20 <__divsf3_pse+0x86>
 a02:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_inf>
 a06:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_szero>
 a0a:	5f 3f       	cpi	r21, 0xFF	; 255
 a0c:	e4 f3       	brlt	.-8      	; 0xa06 <__divsf3_pse+0x6c>
 a0e:	98 3e       	cpi	r25, 0xE8	; 232
 a10:	d4 f3       	brlt	.-12     	; 0xa06 <__divsf3_pse+0x6c>
 a12:	86 95       	lsr	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f7 95       	ror	r31
 a1c:	9f 5f       	subi	r25, 0xFF	; 255
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__divsf3_pse+0x78>
 a20:	88 0f       	add	r24, r24
 a22:	91 1d       	adc	r25, r1
 a24:	96 95       	lsr	r25
 a26:	87 95       	ror	r24
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret
 a2c:	e1 e0       	ldi	r30, 0x01	; 1
 a2e:	66 0f       	add	r22, r22
 a30:	77 1f       	adc	r23, r23
 a32:	88 1f       	adc	r24, r24
 a34:	bb 1f       	adc	r27, r27
 a36:	62 17       	cp	r22, r18
 a38:	73 07       	cpc	r23, r19
 a3a:	84 07       	cpc	r24, r20
 a3c:	ba 07       	cpc	r27, r26
 a3e:	20 f0       	brcs	.+8      	; 0xa48 <__divsf3_pse+0xae>
 a40:	62 1b       	sub	r22, r18
 a42:	73 0b       	sbc	r23, r19
 a44:	84 0b       	sbc	r24, r20
 a46:	ba 0b       	sbc	r27, r26
 a48:	ee 1f       	adc	r30, r30
 a4a:	88 f7       	brcc	.-30     	; 0xa2e <__divsf3_pse+0x94>
 a4c:	e0 95       	com	r30
 a4e:	08 95       	ret

00000a50 <__fixunssfsi>:
 a50:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_splitA>
 a54:	88 f0       	brcs	.+34     	; 0xa78 <__fixunssfsi+0x28>
 a56:	9f 57       	subi	r25, 0x7F	; 127
 a58:	98 f0       	brcs	.+38     	; 0xa80 <__fixunssfsi+0x30>
 a5a:	b9 2f       	mov	r27, r25
 a5c:	99 27       	eor	r25, r25
 a5e:	b7 51       	subi	r27, 0x17	; 23
 a60:	b0 f0       	brcs	.+44     	; 0xa8e <__fixunssfsi+0x3e>
 a62:	e1 f0       	breq	.+56     	; 0xa9c <__fixunssfsi+0x4c>
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	1a f0       	brmi	.+6      	; 0xa74 <__fixunssfsi+0x24>
 a6e:	ba 95       	dec	r27
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__fixunssfsi+0x14>
 a72:	14 c0       	rjmp	.+40     	; 0xa9c <__fixunssfsi+0x4c>
 a74:	b1 30       	cpi	r27, 0x01	; 1
 a76:	91 f0       	breq	.+36     	; 0xa9c <__fixunssfsi+0x4c>
 a78:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_zero>
 a7c:	b1 e0       	ldi	r27, 0x01	; 1
 a7e:	08 95       	ret
 a80:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_zero>
 a84:	67 2f       	mov	r22, r23
 a86:	78 2f       	mov	r23, r24
 a88:	88 27       	eor	r24, r24
 a8a:	b8 5f       	subi	r27, 0xF8	; 248
 a8c:	39 f0       	breq	.+14     	; 0xa9c <__fixunssfsi+0x4c>
 a8e:	b9 3f       	cpi	r27, 0xF9	; 249
 a90:	cc f3       	brlt	.-14     	; 0xa84 <__fixunssfsi+0x34>
 a92:	86 95       	lsr	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b3 95       	inc	r27
 a9a:	d9 f7       	brne	.-10     	; 0xa92 <__fixunssfsi+0x42>
 a9c:	3e f4       	brtc	.+14     	; 0xaac <__fixunssfsi+0x5c>
 a9e:	90 95       	com	r25
 aa0:	80 95       	com	r24
 aa2:	70 95       	com	r23
 aa4:	61 95       	neg	r22
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	08 95       	ret

00000aae <__fp_inf>:
 aae:	97 f9       	bld	r25, 7
 ab0:	9f 67       	ori	r25, 0x7F	; 127
 ab2:	80 e8       	ldi	r24, 0x80	; 128
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	08 95       	ret

00000aba <__fp_nan>:
 aba:	9f ef       	ldi	r25, 0xFF	; 255
 abc:	80 ec       	ldi	r24, 0xC0	; 192
 abe:	08 95       	ret

00000ac0 <__fp_pscA>:
 ac0:	00 24       	eor	r0, r0
 ac2:	0a 94       	dec	r0
 ac4:	16 16       	cp	r1, r22
 ac6:	17 06       	cpc	r1, r23
 ac8:	18 06       	cpc	r1, r24
 aca:	09 06       	cpc	r0, r25
 acc:	08 95       	ret

00000ace <__fp_pscB>:
 ace:	00 24       	eor	r0, r0
 ad0:	0a 94       	dec	r0
 ad2:	12 16       	cp	r1, r18
 ad4:	13 06       	cpc	r1, r19
 ad6:	14 06       	cpc	r1, r20
 ad8:	05 06       	cpc	r0, r21
 ada:	08 95       	ret

00000adc <__fp_round>:
 adc:	09 2e       	mov	r0, r25
 ade:	03 94       	inc	r0
 ae0:	00 0c       	add	r0, r0
 ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0xc>
 ae4:	88 23       	and	r24, r24
 ae6:	52 f0       	brmi	.+20     	; 0xafc <__fp_round+0x20>
 ae8:	bb 0f       	add	r27, r27
 aea:	40 f4       	brcc	.+16     	; 0xafc <__fp_round+0x20>
 aec:	bf 2b       	or	r27, r31
 aee:	11 f4       	brne	.+4      	; 0xaf4 <__fp_round+0x18>
 af0:	60 ff       	sbrs	r22, 0
 af2:	04 c0       	rjmp	.+8      	; 0xafc <__fp_round+0x20>
 af4:	6f 5f       	subi	r22, 0xFF	; 255
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	08 95       	ret

00000afe <__fp_split3>:
 afe:	57 fd       	sbrc	r21, 7
 b00:	90 58       	subi	r25, 0x80	; 128
 b02:	44 0f       	add	r20, r20
 b04:	55 1f       	adc	r21, r21
 b06:	59 f0       	breq	.+22     	; 0xb1e <__fp_splitA+0x10>
 b08:	5f 3f       	cpi	r21, 0xFF	; 255
 b0a:	71 f0       	breq	.+28     	; 0xb28 <__fp_splitA+0x1a>
 b0c:	47 95       	ror	r20

00000b0e <__fp_splitA>:
 b0e:	88 0f       	add	r24, r24
 b10:	97 fb       	bst	r25, 7
 b12:	99 1f       	adc	r25, r25
 b14:	61 f0       	breq	.+24     	; 0xb2e <__fp_splitA+0x20>
 b16:	9f 3f       	cpi	r25, 0xFF	; 255
 b18:	79 f0       	breq	.+30     	; 0xb38 <__fp_splitA+0x2a>
 b1a:	87 95       	ror	r24
 b1c:	08 95       	ret
 b1e:	12 16       	cp	r1, r18
 b20:	13 06       	cpc	r1, r19
 b22:	14 06       	cpc	r1, r20
 b24:	55 1f       	adc	r21, r21
 b26:	f2 cf       	rjmp	.-28     	; 0xb0c <__fp_split3+0xe>
 b28:	46 95       	lsr	r20
 b2a:	f1 df       	rcall	.-30     	; 0xb0e <__fp_splitA>
 b2c:	08 c0       	rjmp	.+16     	; 0xb3e <__fp_splitA+0x30>
 b2e:	16 16       	cp	r1, r22
 b30:	17 06       	cpc	r1, r23
 b32:	18 06       	cpc	r1, r24
 b34:	99 1f       	adc	r25, r25
 b36:	f1 cf       	rjmp	.-30     	; 0xb1a <__fp_splitA+0xc>
 b38:	86 95       	lsr	r24
 b3a:	71 05       	cpc	r23, r1
 b3c:	61 05       	cpc	r22, r1
 b3e:	08 94       	sec
 b40:	08 95       	ret

00000b42 <__fp_zero>:
 b42:	e8 94       	clt

00000b44 <__fp_szero>:
 b44:	bb 27       	eor	r27, r27
 b46:	66 27       	eor	r22, r22
 b48:	77 27       	eor	r23, r23
 b4a:	cb 01       	movw	r24, r22
 b4c:	97 f9       	bld	r25, 7
 b4e:	08 95       	ret

00000b50 <__udivmodqi4>:
 b50:	99 1b       	sub	r25, r25
 b52:	79 e0       	ldi	r23, 0x09	; 9
 b54:	04 c0       	rjmp	.+8      	; 0xb5e <__udivmodqi4_ep>

00000b56 <__udivmodqi4_loop>:
 b56:	99 1f       	adc	r25, r25
 b58:	96 17       	cp	r25, r22
 b5a:	08 f0       	brcs	.+2      	; 0xb5e <__udivmodqi4_ep>
 b5c:	96 1b       	sub	r25, r22

00000b5e <__udivmodqi4_ep>:
 b5e:	88 1f       	adc	r24, r24
 b60:	7a 95       	dec	r23
 b62:	c9 f7       	brne	.-14     	; 0xb56 <__udivmodqi4_loop>
 b64:	80 95       	com	r24
 b66:	08 95       	ret

00000b68 <_exit>:
 b68:	f8 94       	cli

00000b6a <__stop_program>:
 b6a:	ff cf       	rjmp	.-2      	; 0xb6a <__stop_program>
